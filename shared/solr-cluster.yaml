
---
# Source: solr/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: solr-small
  labels:
    app.kubernetes.io/name: solr
    helm.sh/chart: solr-6.0.7
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: solr
  namespace: "ns-team-mkto-corona-argo-test"
type: Opaque
data:
  solr-password: "S29qR3NZU0lPSw=="
---
# Source: solr/charts/zookeeper/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: solr-small-zookeeper-scripts
  namespace: ns-team-mkto-corona-argo-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.6
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
data:
  init-certs.sh: |-
    #!/bin/bash
  setup.sh: |-
    #!/bin/bash

    # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
    # check ZOO_SERVER_ID in persistent volume via myid
    # if not present, set based on POD hostname
    if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
        export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
    else
        HOSTNAME="$(hostname -s)"
        if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
            ORD=${BASH_REMATCH[2]}
            export ZOO_SERVER_ID="$((ORD + 1 ))"
        else
            echo "Failed to get index from hostname $HOST"
            exit 1
        fi
    fi
    exec /entrypoint.sh /run.sh
---
# Source: solr/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: solr-small-scripts
  namespace: "ns-team-mkto-corona-argo-test"
  labels:
    app.kubernetes.io/name: solr
    helm.sh/chart: solr-6.0.7
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: solr
data:
  init-certs.sh: |-
    #!/bin/bash

    . /opt/bitnami/scripts/liblog.sh

    if [[ -f "/certs/keystore.p12" ]] && [[ -f "/certs/truststore.p12" ]]; then
        # the user provided keystore.p12 and truststore.p12 files (prefered)
        cp "/certs/keystore.p12" "/opt/bitnami/solr/certs/keystore.p12"
        cp "/certs/truststore.p12" "/opt/bitnami/solr/certs/truststore.p12"
    elif [[ -f "/certs/ca.crt" ]] && [[ -f "/certs/tls.key" ]] && [[ -f "/certs/tls.crt" ]]; then
        # the user provided ca.crt & tls.key & tls.crt so we "calculate" keystore.p12 and truststore.p12
        openssl pkcs12 -export -in "/certs/tls.crt" \
            -inkey "/certs/tls.key" -out "/tmp/keystore.p12" \
            -passin pass:"/certs/tls.key" -passout pass:"${SOLR_SSL_KEY_STORE_PASSWORD}"
        keytool -importkeystore -srckeystore "/tmp/keystore.p12" \
            -srcstoretype PKCS12 \
            -srcstorepass "${SOLR_SSL_KEY_STORE_PASSWORD}" \
            -deststorepass "${SOLR_SSL_KEY_STORE_PASSWORD}" \
            -destkeystore "/opt/bitnami/solr/certs/keystore.p12"
        rm "/tmp/keystore.p12"
        keytool -import -file "/certs/ca.crt" -keystore "/opt/bitnami/solr/certs/truststore.p12" -storepass "${SOLR_SSL_TRUST_STORE_PASSWORD}" -noprompt
    else
        info "No certificate files provided ... nothing to do ..."
    fi
  setup.sh: |-
    #!/bin/bash
    NODE_ID="${MY_POD_NAME#"solr-small-"}"
    if [[ "$NODE_ID" -eq "0" ]]; then
        export SOLR_CLOUD_BOOTSTRAP=yes
    fi
    # Use hostname instead of IP to register in ZooKeeper
    export SOLR_HOST="${MY_POD_NAME}.solr-small-headless.ns-team-mkto-corona-argo-test.svc.cluster.local"
    /opt/bitnami/scripts/solr/entrypoint.sh /opt/bitnami/scripts/solr/run.sh
---
# Source: solr/charts/zookeeper/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: solr-small-zookeeper-headless
  namespace: ns-team-mkto-corona-argo-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.6
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/component: zookeeper
---
# Source: solr/charts/zookeeper/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: solr-small-zookeeper
  namespace: ns-team-mkto-corona-argo-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.6
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
      nodePort: null
    - name: tcp-follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    app.kubernetes.io/name: zookeeper
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/component: zookeeper
---
# Source: solr/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: solr-small-headless
  namespace: "ns-team-mkto-corona-argo-test"
  labels:
    app.kubernetes.io/name: solr
    helm.sh/chart: solr-6.0.7
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: solr
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-client
      port: 8983
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: solr
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/component: solr
---
# Source: solr/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: solr-small
  namespace: "ns-team-mkto-corona-argo-test"
  labels:
    app.kubernetes.io/name: solr
    helm.sh/chart: solr-6.0.7
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: solr
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-client
      port: 8983
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: solr
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/component: solr
---
# Source: solr/charts/zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: solr-small-zookeeper
  namespace: ns-team-mkto-corona-argo-test
  labels:
    app.kubernetes.io/name: zookeeper
    helm.sh/chart: zookeeper-10.0.6
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: zookeeper
    role: zookeeper
spec:
  replicas: 3
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: zookeeper
      app.kubernetes.io/instance: solr-small
      app.kubernetes.io/component: zookeeper
  serviceName: solr-small-zookeeper-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: zookeeper
        helm.sh/chart: zookeeper-10.0.6
        app.kubernetes.io/instance: solr-small
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: zookeeper
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: zookeeper
                    app.kubernetes.io/instance: solr-small
                    app.kubernetes.io/component: zookeeper
                namespaces:
                  - "ns-team-mkto-corona-argo-test"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: zookeeper
          image: docker.io/bitnami/zookeeper:3.8.0-debian-11-r24
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_PRE_ALLOC_SIZE
              value: "65536"
            - name: ZOO_SNAPCOUNT
              value: "100000"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr,mntr,conf,ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: solr-small-zookeeper-0.solr-small-zookeeper-headless.ns-team-mkto-corona-argo-test.svc.cluster.local:2888:3888::1 solr-small-zookeeper-1.solr-small-zookeeper-headless.ns-team-mkto-corona-argo-test.svc.cluster.local:2888:3888::2 solr-small-zookeeper-2.solr-small-zookeeper-headless.ns-team-mkto-corona-argo-test.svc.cluster.local:2888:3888::3 
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_ENABLE_QUORUM_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/zookeeper
      volumes:
        - name: scripts
          configMap:
            name: solr-small-zookeeper-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: solr/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: solr-small
  labels:
    app.kubernetes.io/name: solr
    helm.sh/chart: solr-6.0.7
    app.kubernetes.io/instance: solr-small
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: solr
  namespace: "ns-team-mkto-corona-argo-test"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: solr
      app.kubernetes.io/instance: solr-small
      app.kubernetes.io/component: solr
  serviceName: solr-small-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/secrets: a57199132c76e16d66ee81d5fbc83fbf20d12dfae1fc1e771cac65a2f4437b22
      labels:
        app.kubernetes.io/name: solr
        helm.sh/chart: solr-6.0.7
        app.kubernetes.io/instance: solr-small
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: solr
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: solr
                    app.kubernetes.io/instance: solr-small
                    app.kubernetes.io/component: solr
                namespaces:
                  - "ns-team-mkto-corona-argo-test"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: solr
          image: docker.io/bitnami/solr:9.0.0-debian-11-r25
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command:
            - /scripts/setup.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SOLR_ENABLE_CLOUD_MODE
              value: "yes"
            - name: SOLR_NUMBER_OF_NODES
              value: "3"
            - name: SOLR_PORT_NUMBER
              value: "8983"
            - name: SOLR_SERVER_DIRECTORY
              value: "server"
            - name: SOLR_COLLECTION
              value: "my-collection"
            - name: SOLR_COLLECTION_SHARDS
              value: "1"
            - name: SOLR_COLLECTION_REPLICAS
              value: "2"
            - name: SOLR_ENABLE_AUTHENTICATION
              value: "yes"
            - name: SOLR_ADMIN_USERNAME
              value: "admin"
            - name: SOLR_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: solr-small
                  key: solr-password
            - name: SOLR_ZK_HOSTS
              value: "solr-small-zookeeper:2181"
          ports:
            - name: http
              containerPort: 8983
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 40
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
            initialDelaySeconds: 40
            timeoutSeconds: 15
            failureThreshold: 6
            periodSeconds: 10
            successThreshold: 1
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                curl --silent --connect-timeout 15000 --user ${SOLR_ADMIN_USERNAME}:${SOLR_ADMIN_PASSWORD} http://localhost:${SOLR_PORT_NUMBER}/api/node/health | grep --quiet  '\"status\":\"OK\"'
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
            initialDelaySeconds: 60
            timeoutSeconds: 15
            failureThreshold: 6
            periodSeconds: 10
            successThreshold: 1
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                curl --silent --connect-timeout 15000 --user ${SOLR_ADMIN_USERNAME}:${SOLR_ADMIN_PASSWORD} http://localhost:${SOLR_PORT_NUMBER}/api/node/health | grep --quiet  '\"status\":\"OK\"'
          volumeMounts:
            - name: scripts
              mountPath: /scripts/setup.sh
              subPath: setup.sh
            - name: data
              mountPath: /bitnami/solr
      volumes:
        - name: scripts
          configMap:
            name: solr-small-scripts
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
